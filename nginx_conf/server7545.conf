server {

  listen 7545 ssl; # managed by Certbot
  server_name nodearch.e-learning.by;

  # настраиваем https - иначе Chrome откажется использовать brotli
  ssl_certificate /etc/letsencrypt/live/nodearch.e-learning.by/fullchain.pem; # managed by Certbot
  ssl_certificate_key /etc/letsencrypt/live/nodearch.e-learning.by/privkey.pem; # managed by Certbot
  include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
  ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

  access_log /home/nodeuser/NodeArch/nginx_logs/server7545-access.log main;
  error_log  /home/nodeuser/NodeArch/nginx_logs/server7545-error.log  error;

  # стандартное сжатие ответов "на лету", настраиваем на всякий случай
  gzip on;
  gzip_disable "msie6";
  gzip_min_length 512;
  gzip_buffers 4 8k;
  gzip_types text/plain text/xml application/xml text/css application/x-javascript application/javascript application/json text/javascript; 
  gzip_comp_level 6;

  # сюда попадают все обращения к html-страницам (предполагаем, что у нас есть сжатые gz- и br-версии для всех html-файлов)
  location ~ \.html$ {
    root /home/nodeuser/NodeArch/theme75/site_football;
    default_type text/html; # важно явно установить, т.к. мы отдадим в итоге архив, и nginx сам подставит Content-Type: binary/octet-stream, и браузер его просто скачает
    
    if ( $http_accept_encoding ~* \bbr\b ) {   # если в заголовке запроса Accept-Encoding есть br (т.е. brotli)
      gzip off;                                # отключаем стандартное автоматическое сжатие ответов
      add_header Content-Encoding br;          # САМИ добавляем в ответ заголовок Content-Encoding: br, т.к. тело ответа БУДЕТ сжатым алгоритмом brotli
      rewrite ^(.+)$ $1.br break;              # и переписываем УРЛ на тот же с постфиксом .br (это внутренний редирект, он клиенту не виден)
    }
    if ( $http_accept_encoding ~* \bgzip\b ) { # если в заголовке запроса Accept-Encoding есть gzip
      gzip off;                                # отключаем стандартное автоматическое сжатие ответов
      add_header Content-Encoding gzip;        # САМИ добавляем в ответ заголовок Content-Encoding: br, т.к. тело ответа БУДЕТ сжатым алгоритмом gzip
      rewrite ^(.+)$ $1.gz break;              # и переписываем УРЛ на тот же с постфиксом .gzip (это внутренний редирект, он клиенту не виден)
    }

    # если мы пришли сюда - заголовка Accept-Encoding или вообще нет, или там что-то экзотическое
    try_files $uri =404;                       # отдаём просто тот файл что запрошен, пусть nginx сам разбирается, сжимать его или нет
  }

  # сюда попадают все обращения к json-файлам (предполагаем, что у нас есть сжатые gz- и br-версии для всех json-файлов)
  location ~ \.json$ {
    root /home/nodeuser/NodeArch/theme75/site_football;
    default_type application/json;
    
    if ( $http_accept_encoding ~* \bbr\b ) {
      gzip off;
      add_header Content-Encoding br;
      rewrite ^(.+)$ $1.br break;
    }
    if ( $http_accept_encoding ~* \bgzip\b ) {
      gzip off;
      add_header Content-Encoding gzip;
      rewrite ^(.+)$ $1.gz break;
    }

    try_files $uri =404;
  }

  # сюда попадают все внутренние редиректы (rewrite) на сжатые версии файлов
  # также сюда попадут и те кто по какой-то причине прямо снаружи обратился к файлу *.html.br или *.html.gz
  # если нам такое не надо - можно внутрь location добавить директиву internal, тогда этот location будет подходить только под внутренние редиректы
  location ~ \.(html|json)\.(gz|br)$ {
      root /home/nodeuser/NodeArch/theme75/site_football; # отдаём gz- или br-файл просто как статику
  }

  # для всех остальных файлов - просто раздаём их как есть
  location ~ ^/ {
    root /home/nodeuser/NodeArch/theme75/site_football;
  }


}
